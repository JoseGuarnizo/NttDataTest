pipeline {
    agent any // Usa cualquier nodo disponible

    environment {
        DOCKER_IMAGE = 'joseguarnizo/testnttdatdev:v2'
        DOCKER_IMAGE_LATEST = 'joseguarnizo/testnttdatdev:latest'
        DOCKER_CREDENTIALS = 'docker-hub-credentials'
        RENDER_SERVICE_ID = 'RENDER_API_TOKEN' // ID del servicio en Render
    }

    stages {
        stage('Checkout') {
            agent {
                label 'node1' // Nodo 1
            }
            steps {
                git branch: 'main', url: 'https://github.com/JoseGuarnizo/NttDataTest.git'
            }
        }

        stage('Build Docker Image') {
            agent {
                label 'node2' // Nodo 2
            }
            steps {
                script {
                    dir('TestApiNttData/TestApiNttData') {
                        bat "docker build -t %DOCKER_IMAGE% ."
                        bat "docker tag %DOCKER_IMAGE% %DOCKER_IMAGE_LATEST%" // Etiqueta 'latest'
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            agent {
                label 'node2' // Nodo 2
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        bat "docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            agent {
                label 'node2' // Nodo 2
            }
            steps {
                script {
                    bat "docker push %DOCKER_IMAGE%"
                    bat "docker push %DOCKER_IMAGE_LATEST%"
                }
            }
        }

        // Desplegar a Render
        stage('Deploy to Render') {
            agent {
                label 'node1' // Nodo 1
            }
            steps {
                withCredentials([string(credentialsId: 'RENDER_API_TOKEN', variable: 'RENDER_API_TOKEN')]) {
                    script {
                        // Usar el API de Render para hacer deploy
                        def response = sh(script: """
                            curl -X POST https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
                            -H "Authorization: Bearer $RENDER_API_TOKEN" \
                            -H "Content-Type: application/json" \
                            -d '{
                                "branch": "main",
                                "dockerImage": "$DOCKER_IMAGE_LATEST"
                            }'
                        """, returnStdout: true).trim()

                        echo "Response from Render: $response"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}